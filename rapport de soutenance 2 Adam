Pour cette deuxième soutenance j'ai travaillé sur les déplacements. Ils ont été amélioré en ajoutant des rotations aux voitures, 
elles roulent maintenant dans le sens de leurs déplacements, les roues tournent et s'orientent dans le sens du déplacement.
J'ai aussi avancé sur la partie multijoueur en synchronisant les animations dans le réseau ce qui permet à chaque joueur de voir 
les animations de son personnage lorsqu'il saute ou cour ainsi que celles des autres joueurs présents dans la partie.
J'ai fait des chemins supplémentaires ce qui permet d'avoir plus de variétés dans les déplacements des voitures 
mais cela peut causer des collisions entre les voitures, j'ai donc dû faire attention à ce qu'il n'y ait pas d'accident.

LES ROTATIONS:
Pour ajouter des rotations aux voitures ,j'ai crée des gameobject aux emplacments de chaque roues ,j'ajoute le component 
WheelCollider et j'ajuste radian des collider en fonction de la taille ddes roues pour reproduire au mieu la physique des roues 
d'une voiture ....

Pour améliorer les déplacements des voitures j'ai diminuer la hauteur de leur centre de gravité ce qui permet à la voiture de 
ne pas se retourner pendant un virage sérré





LES ANIMATIONS EN RÉSEAU:
Jusqu'à présent nous n'avions pas résolue le problème des animations dans la partie multijoueur, il n'y avait que le joueur local
qui etait animé.Pour regler ce probleme j'ai utilisé  les attributs "[Command]" et "[ClientRpc]" ainsi que des fonctions.
"[Commnad]" est un attribut qui peut être mis sur les méthodes des classes NetworkBehaviour pour leur permettre d'être lancées 
sur le serveur en envoyant une commande à partir d'un client. Les fonctions [Command] sont lancée sur le joueur associé à une 
connexion. Les arguments de l'appel de commande sont sérialisés à travers le réseau, de sorte que la fonction serveur est lancée 
avec les mêmes valeurs que la fonction sur le client. Ces fonctions doivent commencer par le préfixe "Cmd" et ne peuvent pas être 
statiques."[ClientRpc]" est aussi un attribut qui peut être mis sur les méthodes des classes NetworkBehaviour pour leur permettre
d'être lancées sur les clients à partir d'un serveur. Les fonctions [ClientRPC] sont appelées par code sur les serveurs 
Unity Multiplayer, puis lancées sur les GameObjects correspondants sur les clients connectés au serveur. 
Les arguments de l'appel RPC sont sérialisés sur le réseau, de sorte que la fonction client est invoquée avec les mêmes valeurs 
que la fonction sur le serveur. Ces fonctions doivent commencer par le préfixe "Rpc" et ne peuvent pas non-plus être statiques.
Pour synchroniser les animation j'ai creer une fonction [ClientRPC] et [Command] pour chaque animation et (test is Serveur...)


LES CHEMINS:






